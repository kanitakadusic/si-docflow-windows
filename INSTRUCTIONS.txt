si-docflow-windows

=> Useful resource: https://www.youtube.com/watch?v=fP-371MN0Ck&ab_channel=freeCodeCamp.org
// For testing-related content, refer to the section starting at 2:51:00.

====================
TECHNOLOGIES
--------------------
=> Install the Prettier plugin for automatic formatting.
// In the root directory, there is a '.prettierrc' file that defines the rules (consult the team for changes).
// Run it on the files you are working on, not on the entire project.
// Depending on the environment, a shortcut for this might be available.

=> Latest LTS Node.js version (v22.14.0).

====================
COMMANDS
--------------------
- Available in 'package.json'.

=> During development (run-all command):
// Changes on the frontend are immediately reflected thanks to hot-reload.
// To see changes on the backend, the application needs to be reset (restart the command below).
// This will be used most frequently.
>>> npm run dev

=> Installation (creating the build):
>>> npm run dist:X
X = { win, mac, linux }

----------
Commands that are unlikely to be used:

=> After changes on the frontend:
// Compiling TS to JS.
>>> npm run transpile:electron

=> Hot-reload during development (changes ON THE FRONTEND are immediately reflected):
- Start the Vite server:
[terminal 1] >>> npm run dev:react
- Start the Electron application:
[terminal 2] >>> npm run dev:electron

=> Optimizing the frontend and backend without creating installation files:
>>> npm run build

====================
PROJECT
--------------------
=> Running the application in development mode:
>>> npm run dev
=> Building and running the application:
// May take a while...
>>> npm run dist:win
- Navigate to the '/dist' folder (outside the IDE).
- Launch 'si-docflow-windows 0.0.0.exe'.

// Thanks to 'isDev()', differences between the development and production environments are handled automatically.
// For example, in development mode, we want access to DevTools, but in production, we don’t.

=> '/dist', '/dist-electron', '/dist-react', '/node_modules' (do not change)
- dist folders typically store automatically generated files after compiling TypeScript into JavaScript.
- They hold the final compiled code that can be executed in a browser or a Node.js environment.
- Usually excluded from version control (.gitignore), as they can always be re-generated from the src/ code.

=> '/types.d.ts'
- This file serves as a type and interface definition in TypeScript, used to precisely type data and functionality within the application.
- Helps with type safety in the application, making it more secure and easier to maintain, as it ensures that data coming from events is correctly typed and used in the proper way.

=> System tray has been implemented (this might be useful for folder monitoring). ['/src/electron/tray.ts/']

=> The foundation for menu customization has been set. ['/src/electron/menu.ts/']
// The frame (the entire area where the default close, maximize, and minimize buttons are) can also be customized.

=> '/src/electron/preload.cts'
- Acts as a bridge between the renderer process (UI) and the main process (Electron’s backend).
- Responsible for securely exposing specific IPC (Inter-Process Communication) functionalities from Electron’s main process to the renderer process using contextBridge.
- Prevents direct access to electron.ipcRenderer in the renderer process, reducing security risks (e.g., remote code execution).
- Controlled API Exposure: Only explicitly defined IPC functions are available to the renderer.

=> '/src/electron/util.ts'
- Ensures safe and structured communication between Electron’s main process and renderer process.
- Defines helpers for IPC event handling.
- Implements security checks to prevent unauthorized access.
- Makes IPC communication more organized and reusable.

=> 'ipcMain.on' (one-way /event-based/ communication) VS 'ipcMain.handle' (two-way /request-response/ communication) [!]